import CryptoJS from 'crypto-js';
import { User } from '../types/user';

const AUTH_KEY = 'game_group_auth';
const SECRET_KEY = process.env.REACT_APP_SECRET_KEY || 'game_group_default_secret_2025';

interface AuthData {
  user: User;
  timestamp: number;
  rememberMe: boolean;
}

export const authStorage = {
  /**
   * ‰øùÂ≠òÁôªÂΩï‰ø°ÊÅØ
   * @param user Áî®Êà∑‰ø°ÊÅØ
   * @param rememberMe ÊòØÂê¶ËÆ∞‰ΩèÁôªÂΩï
   */
  saveAuth: (user: User, rememberMe: boolean = false) => {
    try {
      const data: AuthData = {
        user,
        timestamp: Date.now(),
        rememberMe
      };
      
      console.log('üíæ ÂáÜÂ§á‰øùÂ≠òÁôªÂΩï‰ø°ÊÅØ:', {
        username: user.username,
        rememberMe,
        timestamp: data.timestamp
      });
      
      // Âä†ÂØÜÊï∞ÊçÆ
      const encrypted = CryptoJS.AES.encrypt(
        JSON.stringify(data), 
        SECRET_KEY
      ).toString();
      
      console.log('üîê Êï∞ÊçÆÂ∑≤Âä†ÂØÜÔºåÈïøÂ∫¶:', encrypted.length);
      
      // Ê†πÊçÆËÆ∞‰ΩèÊàëÈÄâÈ°πÂÜ≥ÂÆöÂ≠òÂÇ®‰ΩçÁΩÆ
      if (rememberMe) {
        localStorage.setItem(AUTH_KEY, encrypted);
        sessionStorage.removeItem(AUTH_KEY); // Ê∏ÖÈô§session‰∏≠ÁöÑÊï∞ÊçÆ
        console.log('‚úÖ Êï∞ÊçÆÂ∑≤‰øùÂ≠òÂà∞ localStorage');
      } else {
        sessionStorage.setItem(AUTH_KEY, encrypted);
        localStorage.removeItem(AUTH_KEY); // Ê∏ÖÈô§localStorage‰∏≠ÁöÑÊï∞ÊçÆ
        console.log('‚úÖ Êï∞ÊçÆÂ∑≤‰øùÂ≠òÂà∞ sessionStorage');
      }
      
      console.log('‚úÖ ÁôªÂΩï‰ø°ÊÅØÂ∑≤‰øùÂ≠ò', rememberMe ? '(ÈïøÊúüÂ≠òÂÇ®)' : '(‰ºöËØùÂ≠òÂÇ®)');
    } catch (error) {
      console.error('‚ùå ‰øùÂ≠òÁôªÂΩï‰ø°ÊÅØÂ§±Ë¥•:', error);
    }
  },
  
  /**
   * Ëé∑ÂèñÁôªÂΩï‰ø°ÊÅØ
   * @returns Áî®Êà∑‰ø°ÊÅØÊàñnull
   */
  getAuth: (): User | null => {
    try {
      console.log('üîç ÂºÄÂßãËé∑ÂèñÁôªÂΩï‰ø°ÊÅØ...');
      
      // ‰ºòÂÖà‰ªélocalStorageËé∑ÂèñÔºåÁÑ∂Âêé‰ªésessionStorageËé∑Âèñ
      const encrypted = localStorage.getItem(AUTH_KEY) || 
                       sessionStorage.getItem(AUTH_KEY);
      
      if (!encrypted) {
        console.log('üì≠ Ê≤°ÊúâÊâæÂà∞Â≠òÂÇ®ÁöÑÁôªÂΩï‰ø°ÊÅØ');
        return null;
      }
      
      console.log('üì¶ ÊâæÂà∞Âä†ÂØÜÊï∞ÊçÆÔºåÈïøÂ∫¶:', encrypted.length);
      
      // Ëß£ÂØÜÊï∞ÊçÆ
      const decrypted = CryptoJS.AES.decrypt(encrypted, SECRET_KEY);
      const dataStr = decrypted.toString(CryptoJS.enc.Utf8);
      
      if (!dataStr) {
        console.error('‚ùå Ëß£ÂØÜÂ§±Ë¥•ÔºöÊï∞ÊçÆ‰∏∫Á©∫');
        authStorage.clearAuth();
        return null;
      }
      
      console.log('üîì Êï∞ÊçÆËß£ÂØÜÊàêÂäü');
      
      const data: AuthData = JSON.parse(dataStr);
      
      console.log('üìã Ëß£ÊûêÁöÑÁî®Êà∑Êï∞ÊçÆ:', {
        username: data.user.username,
        rememberMe: data.rememberMe,
        timestamp: new Date(data.timestamp).toLocaleString()
      });
      
      // Ê£ÄÊü•ÊòØÂê¶ËøáÊúüÔºàËÆ∞‰ΩèÊàëÁä∂ÊÄÅ‰∏ã7Â§©ËøáÊúüÔºâ
      if (data.rememberMe) {
        const expireTime = 7 * 24 * 60 * 60 * 1000; // 7Â§©
        const timeDiff = Date.now() - data.timestamp;
        const daysLeft = Math.ceil((expireTime - timeDiff) / (24 * 60 * 60 * 1000));
        
        if (timeDiff > expireTime) {
          console.log('‚è∞ ÁôªÂΩï‰ø°ÊÅØÂ∑≤ËøáÊúü (Ë∂ÖËøá7Â§©)');
          authStorage.clearAuth();
          return null;
        } else {
          console.log(`‚è∞ ÁôªÂΩï‰ø°ÊÅØÊúâÊïàÔºåËøòÊúâ ${daysLeft} Â§©ËøáÊúü`);
        }
      }
      
      console.log('‚úÖ ÁôªÂΩï‰ø°ÊÅØËé∑ÂèñÊàêÂäü');
      return data.user;
    } catch (error) {
      console.error('‚ùå Ëé∑ÂèñÁôªÂΩï‰ø°ÊÅØÂ§±Ë¥•:', error);
      authStorage.clearAuth();
      return null;
    }
  },
  
  /**
   * Ê∏ÖÈô§ÁôªÂΩï‰ø°ÊÅØ
   */
  clearAuth: () => {
    localStorage.removeItem(AUTH_KEY);
    sessionStorage.removeItem(AUTH_KEY);
    console.log('ÁôªÂΩï‰ø°ÊÅØÂ∑≤Ê∏ÖÈô§');
  },
  
  /**
   * Êõ¥Êñ∞ÁôªÂΩïÊó∂Èó¥Êà≥ÔºàÁî®‰∫éÊ¥ªË∑ÉÁî®Êà∑‰øùÊåÅÁôªÂΩïÔºâ
   */
  refreshTimestamp: () => {
    try {
      const encrypted = localStorage.getItem(AUTH_KEY) || 
                       sessionStorage.getItem(AUTH_KEY);
      
      if (!encrypted) {
        return;
      }
      
      const decrypted = CryptoJS.AES.decrypt(encrypted, SECRET_KEY);
      const dataStr = decrypted.toString(CryptoJS.enc.Utf8);
      const data: AuthData = JSON.parse(dataStr);
      
      // Êõ¥Êñ∞Êó∂Èó¥Êà≥
      data.timestamp = Date.now();
      
      // ÈáçÊñ∞Âä†ÂØÜÂπ∂‰øùÂ≠ò
      const newEncrypted = CryptoJS.AES.encrypt(
        JSON.stringify(data), 
        SECRET_KEY
      ).toString();
      
      if (data.rememberMe) {
        localStorage.setItem(AUTH_KEY, newEncrypted);
      } else {
        sessionStorage.setItem(AUTH_KEY, newEncrypted);
      }
    } catch (error) {
      console.error('Êõ¥Êñ∞Êó∂Èó¥Êà≥Â§±Ë¥•:', error);
    }
  }
}; 